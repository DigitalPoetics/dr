---
const { data, fields } = Astro.props;
const searchTerm = Astro.url.searchParams.get('searchTerm')?.trim().toLowerCase() || '';
// const matches = searchTerm
//   ? data.filter(d => d.word.toLowerCase().includes(searchTerm))
//   : [];
---
<div class="autocomplete">
  <form class="search-container" method="GET">
    <input class="input" name="searchTerm" value={searchTerm} placeholder="Find a word..." />
    <button type="submit" id="searchButton">Search</button>
  </form>

  <!-- {matches.length > 0 && (
    <div class="dropdown is-active">
      <div class="dropdown-menu">
        <div class="dropdown-content results">
          {matches.map((match: { word: string }) => (
            <a href={`?searchTerm=${match.word}`} class="dropdown-item">{match.word}</a>
          ))}
        </div>
      </div>
    </div>
  )} -->
    <div class="dropdown">
        <div class="dropdown-menu">
            <div class="dropdown-content results"></div>
        </div>
    </div>
</div>


<script define:vars={{ data }}>
  const input = document.querySelector('.input');
  const dropdown = document.querySelector('.dropdown');
  const results = document.querySelector('.results');

  input.addEventListener('input', (e) => {
    const term = e.target.value.trim().toLowerCase();
    
    if (!term) {
      dropdown.classList.remove('is-active');
      return;
    }

    const matches = data.filter(d => d.word.toLowerCase().includes(term));
    
    if (matches.length > 0) {
      results.innerHTML = matches.map(match => 
        `<a href="?searchTerm=${match.word}" class="dropdown-item">${match.word}</a>`
      ).join('');
      dropdown.classList.add('is-active');
    } else {
      dropdown.classList.remove('is-active');
    }
  });
</script>


<style>
  .autocomplete {
    position: relative;
    width: 300px;
  }
  .search-container {
    display: flex;
    gap: 5px;
  }
  .input {
    flex: 1;
    padding: 6px;
    font-size: 14px;
  }
  #searchButton {
    padding: 6px 12px;
    font-size: 14px;
  }
    .dropdown {
    position: absolute;
    width: 300px;
    top: 100%;
    left: 0;
    z-index: 10;
    display: none;
    }

    .dropdown.is-active {
    display: block;
    }

    .dropdown-content {
    display: flex;
    flex-direction: column;
    }

  .dropdown-menu {
    width: 100%;
    max-height: 400px;
    overflow-y: auto;
    background-color: var(--light-background);
    border: var(--image-border);
  }

a {
    text-decoration: none;
    color: var(--text-color);
}


</style>
