---
// Word2vec.astro
export interface Props {
  // data: Array<{ word: string; x: number; y: number; similar: string[] }>;
  data: string;
  fields: {
    word: string;
    x: string;
    y: string;
    similar: string;
  };
}

// const {fields} = Astro.props;
const selectedWord = Astro.url.searchParams.get('searchTerm')?.trim() || '';
---
<div id="word2vec">
  <svg width="100%" height="400"></svg>
</div>

<!-- Load D3 from CDN --> 
<!-- <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.9.0/d3.min.js"></script> -->
<script is:inline src="./plugins/d3.7.9.0.min.js"></script>

<script define:vars={{ selectedWord }}>
  window.addEventListener("DOMContentLoaded", () => {
    // const data = (window as any).word2vecData;
  // const data = '../data/deleuze/deleuzeWord2vec.json';


    const d3 = globalThis.d3;
    // const data = (window as any).word2vecData;

    d3.json('./data/deleuzeWord2vec.json').then((data) => {

  
    const container = d3.select("#word2vec");
    const containerWidth = container.node().getBoundingClientRect().width;
    const width = containerWidth;
    const height = 400;

    const svg = container.select("#word2vec svg");
    svg.attr("width", width).attr("height", height);


    svg.insert("rect", ":first-child")
      .attr("width", width)
      .attr("height", height)
      .attr("fill", "#e0f7ff");

    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, d => d.x))
      .range([50, width - 50]);

    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, d => d.y))
      .range([height - 50, 50]);

    

    svg.append("g")
      .attr("class", "x axis")
      .attr("transform", `translate(0, ${height - 50})`)
      .call(d3.axisBottom(xScale))
      .selectAll("text, path, line")
      // .style("fill", axisColor)
      .style("stroke", "var(--light-text)")
      .style("stroke-width", "0.5px");

    svg.append("g")
      .attr("class", "y axis")
      .attr("transform", `translate(50, 0)`)
      .call(d3.axisLeft(yScale))
      .selectAll("text, path, line")
      // .style("fill", axisColor)
      .style("stroke", "var(--light-text)")
      .style("stroke-width", "0.5px");

    const points = svg.append("g")
      .attr("class", "word")
      .selectAll("text")
      .data(data)
      .enter()
      .append("text")
      .attr("x", d => xScale(d.x))
      .attr("y", d => yScale(d.y))
      .text(d => d.word)
      .attr("font-size", "10px")
      .attr("fill", "black")
      .attr("class", "node-label")
      .style("display", "block");

    // hover effect

    points.on("mouseover", function(event, d) {
      points.style("opacity", 0.2);
      d3.select(this).style("opacity", 1);
    }).on("mouseout", () => {
      points.style("opacity", 1);
    });

    // expose highlightWord globally

    // Auto-highlight selected word from URL
    // Auto-highlight selected word from URL
    if (selectedWord) {
      const match = data.find(d => d.word === selectedWord);
      if (match) {
        const highlightWords = new Set([match.word, ...match.similar]);
        
        points
          .style("display", d => highlightWords.has(d.word) ? "block" : "none")
          .attr("fill", d => d.word === match.word ? "blue" : "red")
          .attr("font-size", "12px")
          .attr("font-weight", "bold");

        // Force simulation to cluster highlighted words
        const visibleData = data.filter(d => highlightWords.has(d.word));
        visibleData.forEach(d => {
          d.x = d.x;
          d.y = d.y;
        });

        d3.forceSimulation(visibleData)
          .force("x", d3.forceX(d => xScale(d.x)).strength(1))
          .force("y", d3.forceY(d => yScale(d.y)).strength(1))
          .force("collide", d3.forceCollide(15))
          .on("tick", () => {
            points
              .filter(d => highlightWords.has(d.word))
              .attr("x", d => d.x)
              .attr("y", d => d.y);
          });
      }
    }

    
  
    });
  });
</script>

<style>
  #word2vec {
    width: 100%;
  }

  #word2vec svg {
    max-width: 100%;
    height: auto;
    border: var(--image-border);
  }
</style>