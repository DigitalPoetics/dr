---
import BlogPost from './BlogPost.astro';

export interface Props {
  frontmatter?: any;
  index?: string;
  customPosts?: any[]; // Optional: manually provided posts
  customTitle?: string; // Optional: custom title instead of tag-based
  customHref?: string; // Optional: custom href for the title link
}

const { frontmatter, index, customPosts, customTitle, customHref } = Astro.props;
const isIndexActive = Astro.url.pathname === `/${index}/`;

// Use custom posts if provided, otherwise use the original filtering logic
let selectedPosts;
if (customPosts) {
  selectedPosts = customPosts;
} else {
  const allPosts = Object.values(import.meta.glob('../../pages/posts/**/*.mdx', { eager: true }));
  selectedPosts = allPosts.filter((post: any) =>
    post.frontmatter?.index === index
  );
}

// Determine title and href
const displayTitle = customTitle || (frontmatter?.tags?.[0] ? `~ ${frontmatter.tags[0]}` : 'Blog Posts');
const titleHref = customHref || `/${index}/`;
const showAsLink = customTitle ? !!customHref : !!frontmatter?.tags?.[0];
---
<div class="posts-container">
  <p>
    {showAsLink ? (
      <a href={titleHref} 
        class={isIndexActive ? 'active' : ''}
        target="_blank"
        >{displayTitle}</a>
    ) : (
      displayTitle
    )}
  </p>

  <hr>

  <ul>
    {selectedPosts.map((post: any) => 
      <BlogPost 
        url={post.url} 
        title={post.frontmatter.title} 
        description={post.frontmatter.description.slice(0, 70) + '...'}/>
    )}
  </ul>
</div>


<style>
    .posts-container {
        margin: 0 0 0 0;
        width: 100%;
    }

    p {
        margin: -0.5rem 0 0 0;
    }

    hr {
        margin: 0 auto;
    }
    /* li {
        list-style: none;
        margin: 0;
    } */

    /* li::marker {
        color: var(--button-background);
    } */

    /* li:has(> a.active)::marker {
        color: var(--highlight-color);
    } */

    ul {
        margin: 0.5rem 0 3rem 0;
        padding: 0 0 0 1rem;
    }

    a {
        text-decoration: none;
        /* padding: 0 0 0 2rem; */
        /* margin-top: 2rem; */
        color: var(--light-text);
        transition: color 0.2s ease;
    }

    a:hover, a:focus {
        color: var(--hover-color);
    }

    /* a.active {
        font-weight: bold;
        color: var(--highlight-color);
    }

    html.dark a.active {
        color: var(--highlight-color);
    } */

    html.dark a {
        color: var(--dark-text);
    }

    html.dark a:hover, html.dark a:focus {
        color: var(--hover-color);
    }
</style>