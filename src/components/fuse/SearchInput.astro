---
export interface Props {
  label?: string;
  description?: string;
  placeholder?: string;
}

const { 
  label = "Search",
  description = "Enter a search term to find results",
  placeholder = "Enter a search termâ€¦"
} = Astro.props;
---

<aside class="search-input-form">
  <form>
    <div class="form-header">
      <label for="page-search">{label}</label>
      <span class="description">{description}</span>
    </div>
    <input
      type="search"
      required
      min="2"
      max="24"
      name="search"
      id="page-search"
      placeholder={placeholder}
    />
  </form>
</aside>

<script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.8/purify.min.js" is:inline></script>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.querySelector(".search-input-form form");
    const searchInput = document.getElementById("page-search");

    function updateSearchPageURL(searchTerm) {
      const url = new URL(window.location.href);
      if (searchTerm && searchTerm.length > 0) {
        url.searchParams.set("q", searchTerm);
      } else {
        url.searchParams.delete("q");
      }
      window.history.replaceState(null, "", url);
    }

    // Load existing URL param into input
    const urlParams = new URLSearchParams(window.location.search).get("q") || "";
    if (urlParams && searchInput) {
      searchInput.value = urlParams;
    }

    // Handle form submission - UPDATES URL params on same page
    form?.addEventListener("submit", (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      const searchTerm = DOMPurify.sanitize(formData.get("search")?.toString()) || "";
      updateSearchPageURL(searchTerm);
      
      // Trigger custom event for SearchResults component
      window.dispatchEvent(new CustomEvent('searchUpdated', { 
        detail: { query: searchTerm, isFormSubmission: true } 
      }));
    });

    // Handle input changes - UPDATE URL params only (NO search events)
    searchInput?.addEventListener("input", () => {
      const searchTerm = DOMPurify.sanitize(searchInput.value) || "";
      updateSearchPageURL(searchTerm);
      // No search event triggered - only URL update
    });
  });
</script>

<style>
  .search-input-form {
    margin-bottom: 2rem;
  }

  .form-header {
    margin-bottom: 1rem;
  }

  .form-header label {
    display: block;
    font-weight: bold;
    margin-bottom: 0.5rem;
  }

  .description {
    display: block;
    color: var(--text-muted);
    font-size: 0.9rem;
  }

  #page-search {
    width: 100%;
    height: 2.5rem;
    padding: 0 1rem;
    /* border-radius: 4px; */
    font-size: 1rem;
    font-family: inherit;
    /* border: none; */
    box-sizing: border-box;
    border: var(--image-border);
  }

  #page-search:focus {
    border: none;
  }

  @media screen and (min-width: 636px) {
    #page-search {
      height: 3rem;
      font-size: 1.1rem;
    }
  }
</style>