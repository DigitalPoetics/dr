---
export interface Props {
  dataUrl?: string;
  searchData?: any[];
  label?: string;
  description?: string;
  placeholder?: string;
  searchTitle?: string;
  searchKeys?: Array<{ name: string; weight?: number }>;
  linkPrefix?: string;
  authorField?: string;
  titleField?: string;
  dateField?: string;
  slugField?: string;
}

const { 
  dataUrl,
  searchData,
  label = "Search the Blog",
  description = "Enter a search term or phrase to search the blog.",
  placeholder = "Enter a search term…",
  searchTitle = "Search the Blog",
  searchKeys = [
    { name: "title", weight: 1 },
    { name: "description", weight: 0.75 }
  ],
  linkPrefix = "/blog/",
  authorField = "author",
  titleField = "title", 
  dateField = "date",
  slugField = "slug"
} = Astro.props;
---

<style>
  ul {
    list-style-type: none;
    padding: unset;
  }
  ul li {
    display: flex;
  }
  ul li :global(time) {
    flex: 0 0 130px;
    font-style: italic;
    color: #595959;
  }
  ul li a:visited {
    color: #8e32dc;
  }
</style>

<aside class="form">
  <form>
    <div>
      <label for="search">{label}</label>
      <span>{description}</span>
    </div>
    <input
      type="search"
      required
      min="2"
      max="24"
      name="search"
      id="search"
      placeholder={placeholder}
    />
  </form>
</aside>
<p id="searchReadout"></p>
<section aria-label="Search Results">
  <ul id="searchResults"></ul>
</section>

<script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.8/purify.min.js" is:inline></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fuse.js/7.0.0/fuse.min.js" is:inline></script>

<script is:inline define:vars={{ dataUrl, searchData, searchTitle, searchKeys, linkPrefix, authorField, titleField, dateField, slugField }}>
  document.addEventListener("DOMContentLoaded", () => {
    let SEARCH_DATA = searchData; // Use passed data if available
    let FUSE_INSTANCE;
    const FUSE_OPTIONS = {
      includeScore: true,
      shouldSort: true,
      threshold: 0.5,
      keys: searchKeys
    };

    const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#000000" viewBox="0 0 256 256" id="spinner"><path d="M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z"></path><style>#spinner{animation: spin 1s linear infinite;}@keyframes spin{100%{transform: rotate(360deg);}}</style></svg>`;

    const search = document.querySelector("#search");
    const searchReadout = document.querySelector("#searchReadout");
    const resultsList = document.querySelector("#searchResults");

    function updateDocumentTitle(search) {
      document.title = search ? `Search results for "${search}"` : searchTitle;
    }

    function updateSearchReadout(search) {
      searchReadout.textContent = search ? `Search results for "${search}"` : "";
    }

    function updateSearchPageURL(search) {
      const url = new URL(window.location.href);
      url.searchParams.set("q", search);
      window.history.replaceState(null, "", url);
    }

    function generateSearchList(results) {
      return results
        .map((r) => {
          const item = r.item;
          const title = item[titleField] || item.title || "Untitled";
          const date = item[dateField] || item.date;
          const slug = item[slugField] || item.slug;
          const author = item[authorField] || item.author;
          const number = item.number;
          
          const dateAsDate = new Date(date);
          const authorDisplay = author ? ` by ${author}` : "";
          const numberDisplay = number ? ` #${number}` : "";
          
          // Check if slug is a full URL or just a path
          const fullUrl = slug.startsWith('http') ? slug : `${linkPrefix}${slug}/`;
          
          return `<li>
            <time datetime="${dateAsDate.toISOString()}">
              ${dateAsDate.toLocaleDateString("en-us", {
                year: "numeric",
                month: "short",
                day: "numeric",
              })}
            </time>
            <a href="${fullUrl}" target="_blank">${title}${numberDisplay}${authorDisplay}</a>
          </li>`;
        })
        .join("");
    }

    async function fetchSearchResults(searchQuery) {
      if (searchQuery.length === 0) return;
      resultsList.innerHTML = SPINNER;
      
      // If no search data provided, try to fetch from URL
      if (!SEARCH_DATA && dataUrl) {
        try {
          const res = await fetch(dataUrl);
          if (!res.ok) {
            throw new Error("Something went wrong…please try again");
          }
          const data = await res.json();
          SEARCH_DATA = data;
        } catch (e) {
          console.error(e);
          resultsList.innerHTML = "Error loading search data.";
          return;
        }
      }
      
      if (SEARCH_DATA && !FUSE_INSTANCE) {
        FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
      }
      if (!FUSE_INSTANCE) return;
      const searchResult = FUSE_INSTANCE.search(searchQuery);
      resultsList.innerHTML = searchResult.length > 0 ? generateSearchList(searchResult) : "No results found…";
    }

    const urlParams = DOMPurify.sanitize(
      new URLSearchParams(window.location.search).get("q") || ""
    );
    fetchSearchResults(urlParams);
    updateDocumentTitle(urlParams);
    updateSearchReadout(urlParams);
    search.value = urlParams;
    search.focus();

    search.addEventListener("input", () => {
      const searchTerm = DOMPurify.sanitize(search.value);
      updateDocumentTitle(searchTerm);
      updateSearchReadout(searchTerm);
      fetchSearchResults(searchTerm);
      updateSearchPageURL(searchTerm);
    });
  });
</script>