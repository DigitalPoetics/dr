---
const { word2vecData } = Astro.props;
const searchTerm = Astro.url.searchParams.get('searchTerm')?.trim() || '';

// Get similar words for the search term
const wordMatch = word2vecData.find(item => item.word === searchTerm);
const similarWords = wordMatch ? wordMatch.similar.slice(0,20) : [];
---

<div class="autocomplete">
  <form method="GET" class="search-bar">
    <input
      type="text"
      name="searchTerm"
      placeholder="Enter search term..."
      value={searchTerm}
    />
    <button type="submit" class="search-button">Search</button>
  </form>
  <div class="dropdown">
    <div class="dropdown-menu">
      <div class="dropdown-content results"></div>
    </div>
  </div>
</div>

<div class="search-results">
  <p><strong>Keyword:</strong> {searchTerm || 'None'}</p>
  <p><strong>Vectors:</strong> {similarWords.length > 0 ? similarWords.join(', ') : 'None'}</p>
</div>

<script define:vars={{ word2vecData }}>
  const input = document.querySelector('input[name="searchTerm"]');
  const dropdown = document.querySelector('.dropdown');
  const results = document.querySelector('.results');
  const form = document.querySelector('.search-bar');

  form.addEventListener('submit', (e) => {
    input.value = input.value.trim().toLowerCase();
  });

  let timeout;
  input.addEventListener('input', (e) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => {
      const term = e.target.value.trim().toLowerCase();
      
      if (!term) {
        dropdown.classList.remove('is-active');
        results.inerHTML = '';
        return;
      }

      const matches = word2vecData.filter(d => d.word.toLowerCase().includes(term)).slice(0, 10);
      
      if (matches.length > 0) {
        results.innerHTML = `
          <style>
            .dropdown-item { display: block; padding: 0 0 0 0.5rem; font-size: 1rem; text-decoration: none; color: var(--light-text); }
            .dropdown-item:hover { color: var(--hover-color); }
          </style>
          ${matches.map(match => 
            `<a href="?searchTerm=${match.word}" class="dropdown-item">${match.word}</a>`
          ).join('')}`;
        dropdown.classList.add('is-active');
      } else {
        dropdown.classList.remove('is-active');
      }
    }, 300);
  });
</script>

<style>
  .autocomplete {
    position: relative;
    width: 100%;
  }
  
  .search-bar {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .search-bar input {
    flex: 1;
    padding: 0.5rem;
    font-size: 1rem;
    font-family: 'IM Fell English', serif;
    box-sizing: border-box;
  }

  .search-bar button {
    padding: 0.5rem 1rem;
    font-size: 1rem;
    cursor: pointer;
    font-family: 'IM Fell English', serif;
  }

  .search-button {
    border: var(--image-border);
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  .search-button:hover {
    background-color: var(--hover-color);
    color: white;
  }

  .dropdown {
    display: none;
    position: absolute;
    width: 100%;
    top: 100%;
    left: 0;
    z-index: 10;
  }

  .dropdown.is-active {
    display: block;
  }

  .dropdown-content {
    display: flex;
    flex-direction: column;
    background-color: #f5f5f5;
    border: var(--image-border);
  }

  .dropdown-menu {
    width: 100%;
    max-height: 20rem;
    overflow-y: auto;
  }

  .search-results {
    margin: 1rem 0;
  }
</style>
